{
	"scope": "source.lua - variable.other.lua",

	"completions":
	[
		"lua",

		
{ "trigger": "OnLoad", "contents": 							"function OnLoad()" },
{ "trigger": "OnUnLoad", "contents": 						"function OnUnLoad()" },
{ "trigger": "OnDraw", "contents": 							"function OnDraw()" },
{ "trigger": "OnReset", "contents": 						"function OnReset()" },
{ "trigger": "OnTick", "contents": 							"function OnTick()" },
{ "trigger": "OnCreateObj", "contents": 					"function OnCreateObj(${1:object})" },
{ "trigger": "OnDeleteObj", "contents": 					"function OnDeleteObj(${1:object})" },
{ "trigger": "OnWndMsg", "contents": 						"function OnWndMsg(${1:msg}, ${2:key})" },
{ "trigger": "OnProcessSpell", "contents": 					"function OnProcessSpell(${1:unit}, ${2:spell})" },
{ "trigger": "OnSendChat", "contents": 						"function OnSendChat(${1:text})" },
{ "trigger": "OnRecvChat", "contents": 						"function OnRecvChat(${1:unit}, ${2:text})" },
{ "trigger": "OnSendPacket", "contents": 					"function OnSendPacket(${1:packet})" },
{ "trigger": "OnRecvPacket", "contents": 					"function OnRecvPacket(${1:packet})" },
{ "trigger": "OnBugSplat", "contents": 						"function OnBugSplat()" },
{ "trigger": "OnAnimation", "contents": 					"function OnAnimation(${1:unit}, ${2:animation})" },
{ "trigger": "OnApplyParticle", "contents": 				"function OnApplyParticle(${1:unit}, ${2:particle})" },
{ "trigger": "OnNotifyEvent", "contents": 					"function OnNotifyEvent(${1:event}, ${2:unit})" },
{ "trigger": "OnNewPath", "contents": 						"function OnNewPath(${1:unit}, ${2:startPos}, ${3:endPos}, ${4:isDash}, ${5:fSpeed}, ${6:fGravity}, ${7:fDistance})" },
{ "trigger": "OnIssueOrder", "contents": 					"function OnIssueOrder(${1:unit}, ${2:iAction}, ${3:targetPos}, ${4:Target})" },
{ "trigger": "OnCastSpell", "contents": 					"function OnCastSpell(${1:iSpell}, ${2:startPos}, ${3:endPos}, ${4:Target})" },
{ "trigger": "OnApplyBuff", "contents": 					"function OnApplyBuff(${1:Src}, ${2:Target}, ${3:Buff})" },
{ "trigger": "OnUpdateBuff", "contents": 					"function OnUpdateBuff(${1:Src}, ${2:Buff}, ${3:iStacks})" },
{ "trigger": "OnRemoveBuff", "contents": 					"function OnRemoveBuff(${1:Src}, ${2:Buff})" },

	
{ "trigger": "IsKeyPressed", "contents": 					"IsKeyPressed(${1:key})" },
{ "trigger": "IsKeyDown", "contents": 						"IsKeyDown(${1:key})" },
{ "trigger": "CastSpell(iSpell)", "contents": 				"CastSpell(${1:iSpell})" },
{ "trigger": "CastSpell(iSpell, x, z)", "contents": 		"CastSpell(${1:iSpell}, ${2:x}, ${3:z})" },
{ "trigger": "CastSpell(iSpell, Target)", "contents": 		"CastSpell(${1:iSpell}, ${2:Target})" },
{ "trigger": "CastSpell2", "contents":						"CastSpell2(${1:iSlot}, ${2:D3DXVECTOR3})" },
{ "trigger": "CastSpell3", "contents":						"CastSpell3(${1:iSlot}, ${2:D3DXVECTOR3}, ${3:D3DXVECTOR3})" },
{ "trigger": "LevelSpell", "contents":						"LevelSpell(${1:iSpell})" },
{ "trigger": "SetSkin", "contents": 						"SetSkin(${1:unit}, ${2:skinID})" },
{ "trigger": "CalculatePath", "contents": 					"CalculatePath(${1:unit}, ${2:D3DXVECTOR3})" },
{ "trigger": "print", "contents": 							"print(${1:text})" },
{ "trigger": "PrintChat", "contents": 						"PrintChat(${1:text})" },
{ "trigger": "SendChat", "contents": 						"SendChat(${1:text})" },
{ "trigger": "BlockChat", "contents":						"BlockChat()" },
{ "trigger": "GetTextArea", "contents": 					"GetTextArea(${1:string}, ${2:fontSize})" },
{ "trigger": "DrawText", "contents": 						"DrawText(${1:text}, ${2:size}, ${3:x}, ${4:y}, ${5:ARGB})" },
{ "trigger": "DrawLine", "contents": 						"DrawLine(${1:startX}, ${2:startY}, ${3:endX}, ${4:endY}, ${5:size}, ${6:ARGB})" },
{ "trigger": "DrawRectangle", "contents": 					"DrawRectangle(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:ARGB})" },
{ "trigger": "DrawCircle", "contents": 						"DrawCircle(${1:x}, ${2:y}, ${3:z}, ${4:size}, ${5:ARGB})" },
{ "trigger": "DrawRectangleOutline", "contents": 			"DrawRectangleOutline(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:color}, ${6:borderWidth})" },
{ "trigger": "DrawLineBorder3D", "contents": 				"DrawLineBorder3D(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:size}, ${8:color}, ${9:width})" },
{ "trigger": "DrawLineBorder", "contents": 					"DrawLineBorder(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:size}, ${6:color}, ${7:width})" },
{ "trigger": "DrawCircleMinimap", "contents":				"DrawCircleMinimap(${1:x}, ${2:y}, ${3:z}, ${4:radius}, ${5:width}, ${6:color}, ${7:quality})" },
{ "trigger": "DrawCircle2D", "contents": 					"DrawCircle2D(${1:x}, ${2:y}, ${3:radius},${4:width},${5:color},${6:quality})" },
{ "trigger": "DrawCircle3D", "contents": 					"DrawCircle3D(${1:x}, ${2:y}, ${3:z},${4:radius},${5:width},${6:color},${7:quality})" },
{ "trigger": "DrawLine3D", "contents": 						"DrawLine3D(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2},${5:y2},${6:z2},${7:width},${8:color})" },
{ "trigger": "DrawLines3D", "contents": 					"DrawLines3D(${1:points}, ${2:width}, ${3:color})" },
{ "trigger": "DrawTextA", "contents": 						"DrawTextA(${1:text}, ${2:size}, ${3:x}, ${4:y}, ${5:color}, ${6:halign}, ${7:valign})" },
{ "trigger": "DrawText3D", "contents": 						"DrawText3D	(${1:text}, ${2:x}, ${3:y}, ${4:z}, ${5:size}, ${6:color}, ${7:center})" },
{ "trigger": "GetMyHero", "contents": 						"GetMyHero()" },
{ "trigger": "GetTarget", "contents": 						"GetTarget()" },
{ "trigger": "GetTickCount", "contents": 					"GetTickCount()" },
{ "trigger": "GetLatency", "contents": 						"GetLatency()" },
{ "trigger": "GetCursorPos", "contents": 					"GetCursorPos()" },
{ "trigger": "GetDistanceSqr", "contents": 					"GetDistanceSqr(${1:p1}, ${2:p2})" },
{ "trigger": "GetDistance", "contents": 					"GetDistance(${1:p1}, ${2:p2})" },
{ "trigger": "GetEnemyHeroes", "contents": 					"GetEnemyHeroes()" },
{ "trigger": "GetAllyHeroes", "contents": 					"GetAllyHeroes()" },
{ "trigger": "GetSave", "contents": 						"GetSave(${1:name})" },
{ "trigger": "CreateDirectory", "contents": 				"CreateDirectory(${1:path})" },
{ "trigger": "DirectoryExist", "contents": 					"DirectoryExist(${1:path})" },
{ "trigger": "ReadFile", "contents": 						"ReadFile(${1:path})" },
{ "trigger": "WriteFile", "contents": 						"WriteFile(${1:text}, ${2:path}, ${3:mode})" },
{ "trigger": "FileExist", "contents": 						"FileExist(${1:path})" },
{ "trigger": "DeleteFile", "contents": 						"DeleteFile(${1:path})" },
{ "trigger": "GetFileSize", "contents": 					"GetFileSize(${1:path})" },
{ "trigger": "DelayAction", "contents": 					"DelayAction(${1:func}, ${2:delay}, ${3:args})" },
{ "trigger": "EnableOverlay", "contents": 					"EnableOverlay()" },
{ "trigger": "DisableOverlay", "contents":					"DisableOverlay()" },
{ "trigger": "CursorIsUnder", "contents": 					"CursorIsUnder(${1:x}, ${2:y}, ${3:sizeX}, ${4:sizeY})" },
{ "trigger": "createSprite", "contents": 					"createSprite(${1:file})" },
{ "trigger": "UpdateWindow", "contents": 					"UpdateWindow()" },
{ "trigger": "D3DXVECTOR3", "contents": 					"D3DXVECTOR3(${1:x}, ${2:y}, ${3:z})" },
{ "trigger": "WorldToScreen", "contents": 					"WorldToScreen(${1:D3DXVECTOR3})" },
{ "trigger": "ValidTarget", "contents": 					"ValidTarget(${1:object}, ${2:distance}, ${3:enemyTeam})" },
{ "trigger": "BuffIsValid", "contents": 					"BuffIsValid(${1:buff})" },
{ "trigger": "TargetHaveBuff", "contents": 					"TargetHaveBuff(${1:buffName}, ${2:target})" },
{ "trigger": "CountEnemyHeroInRange", "contents": 			"CountEnemyHeroInRange(${1:range}, ${2:object})" },


{ "trigger": "VectorType", "contents": 						"VectorType(${1:v})" },
{ "trigger": "VectorIntersection", "contents": 				"VectorIntersection(${1:a1}, ${2:b1}, ${3:a2}, ${4:b2})" },
{ "trigger": "IsLineSegmentIntersection", "contents": 		"IsLineSegmentIntersection(${1:A}, ${2:B}, ${3:C}, ${4:D})" },
{ "trigger": "LineSegmentIntersection", "contents": 		"LineSegmentIntersection(${1:A}, ${2:B}, ${3:C}, ${4:D})" },
{ "trigger": "VectorDirection", "contents": 				"VectorDirection(${1:v1}, ${2:v2}, ${3:v})" },
{ "trigger": "VectorPointProjectionOnLine", "contents": 	"VectorPointProjectionOnLine(${1:v1}, ${2:v2}, ${3:v})" },
{ "trigger": "Vector", "contents": 							"Vector(${1:a}, ${2:b}, ${3:c})" },


{ "trigger": "vector:clone", "contents": 					"vector:clone()" },
{ "trigger": "vector:unpack", "contents": 					"vector:unpack()" },
{ "trigger": "vector:len2()", "contents": 					"vector:len2()" },
{ "trigger": "vector:len2(v)", "contents": 					"vector:len2(${1:v})" },
{ "trigger": "vector:len", "contents": 						"vector:len()" },
{ "trigger": "vector:dist", "contents": 					"vector:dist(${1:v})" },
{ "trigger": "vector:normalize", "contents": 				"vector:normalize()" },
{ "trigger": "vector:normalized", "contents": 				"vector:normalized()" },
{ "trigger": "vector:rotate", "contents": 					"vector:rotate(${1:phiX}, ${2:phiY}, ${3:phiZ})" },
{ "trigger": "vector:rotated", "contents": 					"vector:rotated	(${1:phiX}, ${2:phiY}, ${3:phiZ})" },
{ "trigger": "vector:projectOn", "contents": 				"vector:projectOn(${1:v})" },
{ "trigger": "vector:mirrorOn", "contents": 				"vector:mirrorOn(${1:v})" },
{ "trigger": "vector:center", "contents": 					"vector:center(${1:v})" },
{ "trigger": "vector:crossP", "contents": 					"vector:crossP()" },
{ "trigger": "vector:dotP", "contents": 					"vector:dotP()" },
{ "trigger": "vector:polar", "contents": 					"vector:polar()" },
{ "trigger": "vector:angleBetween", "contents": 			"vector:angleBetween(${1:v1}, ${2:v2})" },
{ "trigger": "vector:compare", "contents": 					"vector:compare	(${1:v})" },
{ "trigger": "vector:perpendicular", "contents": 			"vector:perpendicular()" },
{ "trigger": "vector:perpendicular2", "contents": 			"vector:perpendicular2()" },


".name",
".charName",
".level",
".visible",
".type",
".x",
".y",
".z",
".isAI",
".isMe",
".buffCount",
".totalDamage",
".dead",
".team",
".networkID",
".health",
".maxHealth",
".mana",
".maxMana",
".bInvulnerable",
".bPhysImune",
".bMagicImune",
".bTargetable",
".bTargetableToTeam",
".controlled",
".cdr",
".critChance",
".critDmg",
".hpPool",
".hpRegen",
".mpRegen",
".attackSpeed",
".expBonus",
".hardness",
".lifeSteal",
".spellVamp",
".physReduction",
".magicReduction",
".armorPen",
".magicPen",
".armorPenPercent",
".magicPenPercent",
".addDamage",
".ap",
".damage",
".armor",
".magicArmor",
".ms",
".range",
".gold",
".pos",
".minBBox",
".maxBBox",
".armorMaterial",
".weaponMaterial",
".deathTimer",
".canAttack",
".canMove",
".isStealthed",
".isRevealSpecificUnit",
".isTaunted",
".isCharmed",
".isFeared",
".isAsleep",
".isNearSight",
".isGhosted",
".isNoRender",
".isFleeing",
".isForceRenderParticles",
".spellOwner",
".spellEnd",
".spellStart",
".spellName",

"myHero",


{ "trigger": "HoldPosition", "contents": 					"HoldPosition()" },
{ "trigger": "MoveTo", "contents": 						"MoveTo(${1:x}, ${2:z})" },
{ "trigger": "Attack", "contents": 						"Attack(${1:target})" },
{ "trigger": "GetDistance", "contents": 					"GetDistance(${1:target})" },
{ "trigger": "CalcDamage", "contents": 					"CalcDamage(${1:target}, ${2:maxDamage})" },
{ "trigger": "CalcMagicDamage", "contents": 				"CalcMagicDamage(${1:target}, ${2:maxMagicDamage})" },
{ "trigger": "getBuff", "contents": 						"getBuff(${1:index})" },
{ "trigger": "getInventorySlot", "contents": 				"getInventorySlot(${1:slot})" },
{ "trigger": "getItem", "contents": 						"getItem(${1:slot})" },
{ "trigger": "GetSpellData", "contents": 					"GetSpellData(${1:iSpell})" },
{ "trigger": "CanUseSpell", "contents": 					"CanUseSpell(${1:iSpell})" },


"sprite.width",
"sprite.height",


{ "trigger": "Draw", "contents": 								"Draw(${1:x}, ${2:y}, ${3:alpha})" },
{ "trigger": "Release", "contents": 							"Release()" },
{ "trigger": "SetScale", "contents": 							"SetScale(${1:x}, ${2:y})" },
{ "trigger": "DrawEx", "contents": 							"DrawEx(${1:D3DRECT srcRect}, ${2:D3DXVECTOR3 pCenter}, ${3:D3DXVECTOR3 pPosition}, ${4:BYTE Alpha})" },


"spell.name",
"spell.level",
"spell.mana",
"spell.cd",
"spell.currentCd",
"spell.range",
"spell.channelDuration",
"spell.startPos",
"spell.endPos",


"item.name",
"item.id",
"item.stacks",


"buff.name",
"buff.startT",
"buff.endT",
"buff.valid",


"READY",
"NOTLEARNED",
"SUPRESSED",
"COOLDOWN",
"NOMANA",
"UNKNOWN",


"_Q",
"_W",
"_E",
"_R",
"SPELL_1",
"SPELL_2",
"SPELL_3",
"SPELL_4",
"ITEM_1",
"ITEM_2",
"ITEM_3",
"ITEM_4",
"ITEM_5",
"ITEM_6",
"RECALL",
"SUMMONER_1",
"SUMMONER_2",


"KEY_DOWN",
"KEY_UP",
"WM_MOUSEMOVE",
"WM_LBUTTONDOWN",
"WM_LBUTTONUP",
"WM_RBUTTONDOWN",
"WM_RBUTTONUP",


"TEAM_NONE",
"TEAM_BLUE",
"TEAM_RED",
"TEAM_NEUTRAL",
"TEAM_ENEMY",


"WINDOW_X",
"WINDOW_Y",
"WINDOW_W",
"WINDOW_H",


{ "trigger": "scriptConfig", "contents": 					"scriptConfig(${1:header}, ${2:name})" },
{ "trigger": "addParam(pVar, pText, SCRIPT_PARAM_ONOFF, defaultValue)", "contents": 						"addParam(${1:pVar}, ${2:pText}, ${3:SCRIPT_PARAM_ONOFF}, ${4:defaultValue})" },
{ "trigger": "addParam(pVar, pText, SCRIPT_PARAM_ONKEYDOWN, defaultValue, key)", "contents": 					"addParam(${1:pVar}, ${2:pText}, ${3:SCRIPT_PARAM_ONKEYDOWN}, ${4:defaultValue}, ${5:key})" },
{ "trigger": "addParam(pVar, pText, SCRIPT_PARAM_ONKEYTOGGLE, defaultValue, key)", "contents": 				"addParam(${1:pVar}, ${2:pText}, ${3:SCRIPT_PARAM_ONKEYTOGGLE}, ${4:defaultValue}, ${5:key})" },
{ "trigger": "addParam(pVar, pText, SCRIPT_PARAM_INFO)", "contents": 						"addParam(${1:pVar}, ${2:pText}, ${3:SCRIPT_PARAM_INFO})" },
{ "trigger": "addParam(pVar, pText, SCRIPT_PARAM_COLOR, defaultValue)", "contents": 						"addParam(${1:pVar}, ${2:pText}, ${3:SCRIPT_PARAM_COLOR}, ${4:defaultValue})" },
{ "trigger": "addParam(pVar, pText, SCRIPT_PARAM_LIST, defaultValue, listTable)", "contents": 						"addParam(${1:pVar}, ${2:pText}, ${3:SCRIPT_PARAM_LIST}, ${4:defaultValue}, ${5:listTable})" },
{ "trigger": "addSubMenu", "contents": 					"addSubMenu(${1:header}, ${2:name})" },
{ "trigger": "permaShow", "contents": 					"permaShow(${1:pVar}" },
{ "trigger": "addTS", "contents": 					"addTS(${1:ts}" },


{ "trigger": "TargetSelector", "contents": 					"TargetSelector(${1:mode}, ${2:range}, ${3:damageType}, ${4:targetSelected}, ${5:enemyTeam})" },


"TARGET_LOW_HP",
"TARGET_MOST_AP",
"TARGET_MOST_AD",
"TARGET_LESS_CAST",
"TARGET_NEAR_MOUSE",
"TARGET_PRIORITY",
"TARGET_LOW_HP_PRIORITY",
"TARGET_DEAD",
"TARGET_CLOSEST",
"DAMAGE_MAGIC",
"DAMAGE_PHYSICAL",


"ovior",

	]
}
